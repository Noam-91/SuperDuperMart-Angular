import { Component, OnInit } from '@angular/core';
import {ActivatedRoute, Router} from "@angular/router";
import {ProductService} from "../../services/product.service";
import {of, switchMap} from "rxjs";
import {FormControl, FormGroup, Validators} from "@angular/forms";
import {IProductInternal} from "../../../shared/models/IProduct";
import {MatSnackBar} from "@angular/material/snack-bar";
import {ICategoryInternal} from "../../../shared/models/ICategory";

@Component({
  selector: 'app-product-edit',
  templateUrl: './product-edit.component.html',
  styleUrls: ['./product-edit.component.scss']
})
export class ProductEditComponent implements OnInit {
  isNewProduct: boolean = false;
  product: IProductInternal | null = null;
  categories: ICategoryInternal[] = [];
  selectedCategory: ICategoryInternal | null = null;
  productForm: FormGroup;

  constructor(private route: ActivatedRoute,
              private router: Router,
              private ps: ProductService,
              private snackBar: MatSnackBar) {
    this.productForm = new FormGroup({
      productId: new FormControl({ value: null, disabled: true }),
      name: new FormControl('', Validators.required),
      description: new FormControl(''),
      isActive: new FormControl(true),
      priceRetail: new FormControl(0, [Validators.required, Validators.min(0.01)]),
      priceWholesale: new FormControl(0,Validators.min(0)),
      imageUrl: new FormControl('', Validators.required),
      inventoryQuantity: new FormControl(0, [Validators.required, Validators.min(0)] ),
      category: new FormControl(null, Validators.required )
    })
  }

  ngOnInit(): void {
    this.route.paramMap.pipe(
      switchMap(params => {
        const productIdParam = params.get('productId');
        if(productIdParam){
          const productId = Number(productIdParam);
          return this.ps.getProductByIdInternal(productId);
        }
        this.isNewProduct = true;
        return of(null)
      })
    ).subscribe({
      next: product => {
        if (product !== null) {
          this.productForm.patchValue({
            productId: product.productId,
            name: product.name,
            description: product.description,
            isActive: product.isActive,
            priceRetail: product.priceRetail,
            priceWholesale: product.priceWholesale,
            imageUrl: product.imageUrl,
            inventoryQuantity: product.inventory.quantity,
            category: this.categories.find(cat => cat.categoryId === product.category.categoryId) || null
          });
          this.product = product;
          this.selectedCategory = product.category;
        }
      },
      error: err => {
        console.error(err);
        this.snackBar.open('Failed to load product for editing.', 'Close', { duration: 3000 });
        this.isNewProduct = true;
        this.productForm.reset();
      }
    });

    this.ps.getAllCategoriesInternal().subscribe({
      next: categories => {
        this.categories = categories;
      },
      error: err => {
        console.error(err);
        this.snackBar.open('Failed to load categories.', 'Close', { duration: 3000 });
      }
    });
  }

  saveProduct(): void {
    this.productForm.markAllAsTouched();
    if (this.productForm.valid) {
      // Get all form values, including disabled controls like productId
      const formValues = this.productForm.getRawValue();

      // Initialize productToSave. If it's a new product, create a fresh object.
      // If editing, start with a copy of the existing product data.
      let productToSave: IProductInternal = this.isNewProduct ? {
        productId: 0, // Will be ignored/generated by backend for new product
        isActive: formValues.isActive, // From form
        createdAt: new Date(), // Set by frontend, or backend will override
        updatedAt: new Date(), // Set by frontend, or backend will override
        createdBy: 0, // Placeholder, replace with actual user ID
        updatedBy: 0, // Placeholder, replace with actual user ID
        inventory: { quantity: formValues.inventoryQuantity }, // From form
        category: formValues.category, // The selected ICategoryInternal object from form
        name: formValues.name,
        description: formValues.description,
        priceRetail: formValues.priceRetail,
        priceWholesale: formValues.priceWholesale,
        imageUrl: formValues.imageUrl,
      } : { ...this.product! };

      // Update properties from form values for both new and existing products
      productToSave.name = formValues.name;
      productToSave.description = formValues.description;
      productToSave.isActive = formValues.isActive;
      productToSave.priceRetail = formValues.priceRetail;
      productToSave.priceWholesale = formValues.priceWholesale;
      productToSave.imageUrl = formValues.imageUrl;
      productToSave.inventory.quantity = formValues.inventoryQuantity;
      productToSave.category = formValues.category; // Assign the full ICategoryInternal object



      if (!this.isNewProduct) {
        // Update existing product
        this.ps.updateProductInternal(productToSave).subscribe({
          next: (newProduct) => {
            this.productForm.patchValue({
              productId: newProduct.productId,
              name: newProduct.name,
              description: newProduct.description,
              priceRetail: newProduct.priceRetail,
              priceWholesale: newProduct.priceWholesale,
              imageUrl: newProduct.imageUrl,
              inventoryQuantity: newProduct.inventory.quantity,
              category: this.categories.find(cat => cat.categoryId === newProduct.category.categoryId) || null
            });
            this.snackBar.open('Product updated successfully!', 'Close', { duration: 3000 });
            this.ps.getProductById(this.product?.productId!);
          },
          error: err => {
            console.error('Failed to update product:', err);
            this.snackBar.open('Failed to update product.', 'Close', { duration: 3000 });
          }
        });
      } else {
        // Create new product
        this.ps.createProductInternal(productToSave).subscribe({
          next: (newProduct) => {
            this.productForm.patchValue({
              productId: newProduct.productId,
              name: newProduct.name,
              description: newProduct.description,
              priceRetail: newProduct.priceRetail,
              priceWholesale: newProduct.priceWholesale,
              imageUrl: newProduct.imageUrl,
              inventoryQuantity: newProduct.inventory.quantity,
              category: this.categories.find(cat => cat.categoryId === newProduct.category.categoryId) || null
            });
            this.snackBar.open('Product created successfully!', 'Close', { duration: 3000 });

            // Navigate to the new product's edit page using its ID
            this.router.navigate(['/product-edit', newProduct.productId]);
          },
          error: err => {
            console.error('Failed to create product:', err);
            this.snackBar.open('Failed to create product.', 'Close', { duration: 3000 });
          }
        });
      }
      this.isNewProduct = false;
    }
  }

  onCancel(): void {
    // Navigate back to the previous page or a default product list page
    this.router.navigate(['/']); // Adjust target route as needed
  }

// Helper function for mat-select to compare objects
  compareCategories(c1: ICategoryInternal | null, c2: ICategoryInternal | null): boolean {
    return c1 && c2 ? c1.categoryId === c2.categoryId : c1 === c2;
  }

  // Helper getters for easier access to form controls and their validity
  get nameControl() { return this.productForm.get('name'); }
  get isActiveControl() { return this.productForm.get('isActive'); }
  get priceRetailControl() { return this.productForm.get('priceRetail'); }
  get priceWholesaleControl() { return this.productForm.get('priceWholesale'); }
  get imageUrlControl() { return this.productForm.get('imageUrl'); }
  get inventoryQuantityControl() { return this.productForm.get('inventoryQuantity'); }
  get categoryControl() { return this.productForm.get('category'); }
}
